					
######################
Day 4 - 2nd June 2024
######################

	Automate using DevOps Tool :
	
	- Build the Code 
				--> Is a process of compiling the code and create artifacts(Binaries - *.war/*.jar/*.dll/*.exec)
	- Unit Testing 
	- Promote the changes to Test Environments
	- Notify the Testing Team thru Emails
	
	Build Orchestration using Jenkins  :
	
		- Is an open-source Build Orchestration Tool to automate CI and CD.
		
		- It is based on Master - Slave Architecture
		
			Jenkins_Master Node 	(VM)
			
				Jenkins_Slave Nodes (VM)
				
		- Jenkins Architecture
		
		- Roles and Responsibilities
		
		
		Lab : AWS Cloud Platform :::
		
			- Create a free-tier Account on AWS Cloud Platform	
				- 12 Months 						# https://aws.amazon.com/console/
					- Active Email_ID and Mobile Number
					- Active Credit/Debit Card - Authentication
					
			- Create EC2 Instances (Virtual Machine) 
			
			- Connection to EC2 Instances 
			
				SSH Connection :
					EC2 Instance Connect (Thru. web browser) 
					SSH Agents 
						- MobaXterm					# https://mobaxterm.mobatek.net/download.html
						
							Host_Name 
							User_Name 
							Credential 
							
						- Putty
						
					Terminal 
			
			- Visual Studio Code - IDE				# https://code.visualstudio.com/download 
					
		Environments
		
			- DEV	(VM) 
			- Builds
			- QA 
			- UAT 
			- PROD
			
		Jenkins Architecture ::::
		
			Jenkins_Master Node 	(VM)	--> Install Jenkins : jdk
											--> Used to Create the Jenkins Jobs/Projects and schedule it to run in slave Nodes
											--> git, Build Tools - java,.net,python,nodejs,angular,ruby
			
				Jenkins_Slave Nodes (VM)	--> git, Build Tools 
											--> Used to run the build Jobs to Build the Application Artifacts							
		
		
			Jenkins_Master Node 	(VM)
			
				Jenkins_Slave Node1 (VM)	--> Java Application  - jdk, maven, 
				Jenkins_Slave Node2 (VM)	--> Python Application
				Jenkins_Slave Node3 (VM)	--> NodeJS Application
				Jenkins_Slave Node4 (VM)	--> .Net Application
				Jenkins_Slave Node5 (VM)	--> Angular Application				
				
		Jenkins ::
		
			Developers' Perspective :
				- Consumers
			
			
			DevOps Perspective :	
			
				- Administration
				
				Roles and Responsibilities of DevOps Team :
				
				- Jenkins Servers and tools are owned by DevOps Team
				
				- Installation and Configuration of Jenkins 
				- Plugins Management
				- Tools Management
				- User Management
				- Security Management
				- Credential Management
				- Jenkins Global System Management
				- Create CICD Pipeline Projects to automate builds and deployments 
				- Onboard the Applications to devOps automation
				- Trouble-shooting Issues 
				- Periodic Upgrade of Jenkins and Plugins 
				- Back-up & Recovery
				
		Jenkins using Groovy Scripts to do process Automation.
		
		
		- Installation and Configuration of Jenkins :::
		
			Launch VM - EC2 Instances --> 
			
				VM - OS - Linux/Windows/Mac 
					- Linux Distribution :::
					
						- Debian/Ubuntu		- apt-get / apt 
						- Fedora 			- dnf 
						- RHEL / Centos 	- yum 
						- Amazon Linux 		- dnf						
						
					Package(Tools) Manager  -- Used to Manage(Installation/Uninstallation/Upgrade) the packages 
					
					Jenkins Plugins 		-- This is based on Jenkins 
					
		- https://www.jenkins.io/doc/book/installing/linux/
		
			- Pre-requisites	
				- Launch Ubuntu AMI - v22.04
				- Jenkins run in default port 8080
				- jdk 
				
			- Install the actual package 
				- jenkins
			
			- Post-Installation Activities
				- start jenkins and enable it
				
		
		Launch VM - EC2 Instances --> 
		
			- Ubuntu AMI - v22.04
			
			
			1 VM 	==> 750 Hrs/Month
				
			10 VMs	==> 75 Hrs/Month 
			
			
		On-premises Environments 
		-- Cloud 
		
		DevOps 
		
		Linux Administration Batch : Linux 
		
		Install Hyperviser in local Machine & Create Linux VMs
		
		SSH - port 22 connect to any remote servers 
		
		SSH Agent 
			- MobaXterm 
		
		12 - 15 VMs  --> AWS 
			server 
			storage		- 500TB + 500
			network
			OS
			System components 
			
		
Installation of Jenkins :::

# Install JDK :

sudo apt update -y
sudo apt install fontconfig openjdk-17-jre -y
java -version			
		
		
# Install Jenkins :
					
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
  
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update -y

sudo apt-get install jenkins -y

jenkins --version 

runs as a service in port 8080

<external_ip_addr>:8080

35.154.137.92:8080
		
				
			

				- Plugins Management
				- Tools Management
				- User Management
				- Security Management
				- Credential Management
				- Jenkins Global System Management
		

	Create Jenkins Jobs/Projects :
	
		- Free-Style Project - Manual Config. 
		
		
		- Pipeline Project	 - Created using Groovy Script
		
			Scripted Pipelines 		--> 	typical groovy scripts
			
			Declarative Pipelines	-->		Pipeline Snippet Generator 	
			
			
			
			Variables ::
			
				- Environment Variables
				
					- echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
						"${var1}"
						
						
				- User Defined Variables 
			
	

	Declarative ::
	gitlab-ci
	az-pipeline
	bamboo
		
######################
Day 5 - 8th June 2024
######################


	Jenkins :
	
		- Create Project 
				Free-Style Project - Manual Config. 
				Variables ::
			
				- Environment Variables
				
					- echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
						"${var1}"
						
						
				- User Defined Variables 
				
					Deployment Job

						Deploy the artifacts to target environments			50 Environments ?
							1 Job with parameter qa, uat
						
						a = 5 ;
				

		- Pipeline Project	 - Created using Groovy Script
		
			Scripted Pipelines 		--> 	typical groovy scripts
			
			Declarative Pipelines	-->		Pipeline Snippet Generator 


				Pipelines are composed of various Stages :::

					DevOps Approach :
					
						- Create Source Code 
						- Save/Commit the Source Code to a Source Code Repository(github)
						
						Automate using DevOps Tool :
						
						- Identify the src_code
						- Build the Code 
									--> Is a process of compiling the code and create artifacts(Binaries - *.war/*.jar/*.dll/*.exec)
						- Unit Testing 
						- Promote the changes to Test Environments
						- Notify the Testing Team thru Emails				
					

Declarative Pipeline :::
				
pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
            }
        }
        stage('Deploy to Target Environment ') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}
				
Maven Build Tool ::		

	It is used to build the java maven project 
	
	It composed two items :
	
		- Maven : pom.xml 
					- It is used to define the properties of the application artifact, dependencies and the plugins required to build the application.
					- Will be maintained by Developers in Source code repositories.
		
		- Maven : Goals
					- Define the objective of Maven 
					
						- compile 	- It just compile the code and check the compilation errors.
						- test		- It will compile the code and perform unit testing	
						- package	- It is used to compile, test and create artifacts in target folder  
						- clean		- It is used to clean the target folder 
	

					mvn clean package


		- Jenkins Master Node and Slave Node Configuration :::
		
					Purpose ?
					Tools to be installed?
			
			
			Jenkins_Master (VM)				Purpose	: Used to Create the Jenkins Jobs/Projects and schedule it to run in slave Nodes
											Tools 	: git, jdk, jenkins
											
				Jenkin_Slave (VM)			Purpose : Java Application Build and create artifacts
											Tools 	: git, jdk, maven 
			

			SSH COnnection 
				- Host Name 
				- User Name 
				- User Credentials 
					- password 
					- token 
					- key based authentication


Schedule the pipeline job to run in slave node :::

pipeline {
    agent { label 'may25slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/Edu-DCP-May25/java-mvn-springbootapp1.git'				
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Environment ') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}


Setup the Target Server using Tomcat ::: default port 8080

	Target/Hosted server

		- Install Web Application Server		
		
			Tomcat,Nginx,Apache httpd

			
	Jenkins_Master (VM)			-- git,jdk,jenkins
		Jenkins_Slave (VM) 		-- git,jdk,maven 				*.war
		
	Tomcat_Server (VM)			-- jdk,tomcat
	
		

	Non-Prod Environments
	
		Dev 
		
		Build (VM)	--> 
		
		QA (VM)		-->  
		
		UAT 						==> PROD 
		
			

	Deployment ???
	
		--> Just a process of copying artifacts from one server to another server 
							As a devopsadmin user from jenkins master
		Source Server														Target Server 
		
			Jenkins_Slave_Node													Tomcat_Server 
			
				target/demo.war														/opt/tomcat/webapps/demo.war
				
				Artifacts Library/Repositories
					Jfrog artifactory

Next ::

	Integrate Tomcat_Server with Jenkins_Master 
	
	CI/CD Pipeline 
	
	Build Trigger 
	
	Email Notifications
	

######################
Day 6 - 9th June 2024
######################

	Integrate Tomcat_Server with Jenkins_Master :::
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/Edu-DCP-May25/java-mvn-springbootapp1.git'				
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Tomcat_Server ') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/demo-1.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }			
        }
    }
}

	Jenkins_Master (VM)			-- git,jdk,jenkins
		Jenkins_Slave (VM) 		-- git,jdk,maven 				*.war
		
	Tomcat_Server (VM)			-- jdk,tomcat
	
	
	Install Publish over ssh plugins 
	
	Configure tomcat server using Publish over ssh plugins



sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/demo-1.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])



	Build Trigger :::
	
		- Build Periodic :::
		
			- It used to schedule the job to run in a specific time using Cron-tab
			https://crontab.guru/
			
			Non-Prod Servers								Prod_Servers 
				(8AM - 10PM)
				
				dev
				build 
				qa 
				uat												prod-servers 
		
			Start_Job	- 8AM 
			
			Stop_Job	- 10PM
			
			
		- Github Webhook :::	CI/CD
		
			- It is used to trigger the jobs whenever there is any commit happened in the remote repo
			
			Setup- github webhook to the jenkins job.
		http://43.204.145.187:8080/github-webhook/
		
		http://13.201.136.71:8080/github-webhook/	
		
		
		- Poll SCM :::
		
			- It is used to schedule the job to run in a specific time using Cron-tab, only if there is any changes committed to the remote repo.
			
			Test Cycles:

				Testing Team -- Start the Testing :
				
				8am, 12pm, 3pm
			
			
		CICD Pipeline :
		
			scm_checkout 
			build 
			unit_test 
			sonarqube_analysis
			
			promote to higher environments
				Testing will be notified 
				
			
	Email Notifications :::
	
		gmail server 
		
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA / Two Way Authentication --> mobile#
search for app password
App Password = 16 bytes of App Password. 
What ? window
Which Appln - email			
		
Post Build Action in the Jenkins Pipeline Jobs ::

	success 
	failure
	unstable 		
		
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/Edu-DCP-May25/java-mvn-springbootapp1.git'				
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
            }
			 post {
				success {
				  sh "echo 'Send mail on success'"
					mail bcc: 'loksaieta223@gmail.com', body: 'The Job Status', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Jenkins Job Status', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
				}
				failure {
				  sh "echo 'Send mail on failure'"
					mail bcc: 'loksaieta223@gmail.com', body: 'The Job Status', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Jenkins Job Status', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
				}
			  }			
        }
        stage('Deploy to Tomcat_Server ') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/demo-1.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }			
        }
    }
}
		


	
	CICD : Continuous Deployment  
	
		SCM_Checkout
		
		Build 
		
		Deployment to QA Environment
		
		Automated QA Testing 
		
		Deployment to UAT Environment
		
		Automated UAT Testing 		

		Deployment to PROD Environment
		
		Automated PROD Testing 		

	CICD : Continuous Delivery  
	
		SCM_Checkout
		
		Build 
		
		Approval Stage 
		
		Deployment to Target
		
		
				
												
			
		
		
		
