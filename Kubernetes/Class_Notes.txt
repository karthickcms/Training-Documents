
######################
Day 8 - 16th June 2024
######################

	Container Orchestration Tools ;
	
		Overview of Docker Compose 
		Overview of Docker Swarm 
		
		Kubernetes
		
		
	Container Orchestration ??? 
	


		3-tier Application Architecture
		
		Sign-In Service 	- Containerized ::
		
			- Front-End Layer 				C1,C1.1,c1.2
			
			- Application Layer 			C2,C2.1,c2.2
			
			- Backend - Database Layer 		C3,C3.1,c3.2


		Create replicas of Containers to ensure high availability

		Overview of Docker Compose :::
		
			- It is used run multiple containers as Single Service 
			- docker-compose.yaml - define all the containers to be executed as a service
			- All Containers will be started / stopped at the same time.
			
		Install docker-compose.io 
			
		Docker Swarm ::
		
			It is used to orchestrate Docker Container only
			
			It is used to create replicas of Container, It helps to ensure high availability of Container 
			
			Scale-up 
			
			Scale-Down 
			
			Not possible to Auto-Scale 
			
			Not possible to perform Load Balancing 
			
		Application :
		
			E_Commerce Portal ::
			
			
			100 Replicas of containers --> 10000 Users --> Expected Traffic

			10000 Users -- 100 Replicas
			
			50000 Users ??
			
				Auto Scaling --> Scale-up / Scale-Down


		Kubernetes ::::
		
			--> It is Open-Source Container Orchestration Tool
			
			--> Used to Ensure High-Availability of Containers/Pods
			
			--> Create the replicas of Container/Pods to ensure high availability.

			--> Perform Auto-Scaling 
			
			--> Load-Balancing
			
			--> Using Kubernetes and DevOps Process, we can achieve Continous Deployment
			
		
		
		Managed Services::::
		
			AWS 	---> ECS/ECR/EKS
			
			Azure 	---> ACS/ACR/AKS
			
			GCP 	---> GCE/GCR/GKE
			
			
		Kubernetes Architecture :::
		
			- Components of Kubernetes Architecture
		
		Kubernetes Terminologies :::
		
		Installation and Configuration of Kubernetes :::
		
		Kubernetes Concepts :::
		
			Pods 
			Controller Objects 
			Volumes 
			Services 
			Namespaces 
		
		
			
		Kubernetes Architecture :::
		
			Client-Server ::
			
			Kubernetes_Master (VM)			--> Used to create and schedule the pods for deployment 
				Kubernetes_WorkerNode1 (VM)	--> Used for actual deployment 
				Kubernetes_WorkerNode2 (VM)
				Kubernetes_WorkerNode3 (VM)
				Kubernetes_WorkerNode4 (VM)
				Kubernetes_WorkerNode5 (VM)
		
			- Components of Kubernetes Architecture	
				- API Server 
				- ETCD 
				- Scheduler
				- Controller Manager 
				
				- Kubelet 
				- Kube-Proxy 
				- CRI - Container-D

		Kubernetes Terminologies :::
		
			- Kubernetes Cluster		# It is a collection of Worker_Nodes 
			
			- kubectl					# Is a Command Line Utility used to interact with Kubernetes Master

			- kubeadm					# Is a Command Line Utility used to Configure Kubernetes Cluster
			
			- Image 					# It is static file, that defines the properties of Container
										# Images are Non-Executable
										# Images are composed of various Layers created using Dockerfile Instructions
			
			- Container					# Containers are the Executable units of Images  
			
			- Container_Engine 			# Is used to Create Container Images and Containers
			
			- Container Registry		# Is used manage/version control the Container Images.
										# Dockerhub
										# https://hub.docker.com/
			
			- Container Repository		# Is a sub-set of Container Registry 
					
			- Pod 						# Is a smallest unit of task schedule in Kubernetes
										# Used to Run Container 
			
			
			- Kubernetes Cluster		# It is a collection of Worker_Nodes 




			Kubernetes_Master (VM)	
					Kubernetes_WorkerNode1 (VM)
					Kubernetes_WorkerNode2 (VM)
					Kubernetes_WorkerNode3 (VM)
					
					
			Kubernetes_Master (VM)	
				Kubernetes_Cluster1
					Kubernetes_WorkerNode1 (VM)
					Kubernetes_WorkerNode2 (VM)
					Kubernetes_WorkerNode3 (VM)
				Kubernetes_Cluster2
					Kubernetes_WorkerNode1 (VM)
					Kubernetes_WorkerNode2 (VM)
					Kubernetes_WorkerNode3 (VM)
				Kubernetes_Cluster3
					Kubernetes_WorkerNode1 (VM)
					Kubernetes_WorkerNode2 (VM)
					Kubernetes_WorkerNode3 (VM)
			
			Kubernetes_Master 
				Kubernetes_Master1 (VM)							AWS
					Kubernetes_Cluster1
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)
					Kubernetes_Cluster2
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)
					Kubernetes_Cluster3
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)
				Kubernetes_Master2 (VM)						 	Azure
					Kubernetes_Cluster1
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)
					Kubernetes_Cluster2
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)
					Kubernetes_Cluster3
						Kubernetes_WorkerNode1 (VM)
						Kubernetes_WorkerNode2 (VM)
						Kubernetes_WorkerNode3 (VM)


		
		Docker - run a container! replicas of containers needed to ensure high availability.

		Installation and Configuration of Kubernetes :::


		Kubernetes Concepts :::
		
		
			Pods :::
			
			Working with Kubectl to create kubernetes Objects
			
			Create Manifest_file  ==> *.yaml
			
			
		Pods

Next ::::

		Controller Objects :
			- Replication Controller 
			- Replicaset 
			- Deployment Objects
			- Daemonset 
		Volumes :
			- Hostpath volume
			- ConfigMap
			- Secret
			- Persistant Volume
			- Persistant Volume Claim
		Services 
			- NodePort Service 
			- ClusterIP Service 
			- Load Balancer Service 
		Namespaces

#######################
Day 9 - 22nd June 2024
#######################		
					
		Controller Objects :
			- Replication Controller 
			- Replicaset 
			- Deployment Objects
			- Daemonset 
		Volumes :
			- Hostpath volume
			- ConfigMap
			- Secret
			- Persistant Volume
			- Persistant Volume Claim
		Services 
			- NodePort Service 
			- ClusterIP Service 
			- Load Balancer Service 
		Namespaces




		Kubernetes ::::
		
			--> It is Open-Source Container Orchestration Tool
			
			--> Used to Ensure High-Availability of Containers/Pods
			
			--> Create the replicas of Container/Pods to ensure high availability.

			--> Perform Auto-Scaling 
			
			--> Load-Balancing
			
			--> Using Kubernetes and DevOps Process, we can achieve Continous Deployment


			Kubernetes_Master (VM)	
				Kubernetes_WorkerNode1 (VM) -- Deployment 
				Kubernetes_WorkerNode2 (VM) -- Deployment

			Pod --> one instance of pod was deployed in workernode1 
			
			
			Create Replicas of Pods and Deploy it in the available worker Nodes

				- 2 copies of pod 

		Controller Objects :
			- Replication Controller 
			- Replicaset 
			- Deployment Objects
			- Daemonset 


			Replication Controller & Replicaset ::
			
				- Both are used to run specific number of pods
				- Replication Controller uses the Equality Based Operator 
					envi = dev 
					
				- Replicaset uses the Set based operator
					dev-envi = {dev1,dev2,dev3}
					test-envi = {qa1,qa2,qa3}
					
				- Replicasets can be automatically created using Deployment Controller Object
				
				- Latest verion of kubernetes supports Replicaset
				
			- Deployment Object	

				- It Creates replicas of Pods using Replicaset 
				- Scale-up/Down the pod instances 
				- Upgrade / Roll-back the Changes without impacting the Applications
				- Application Upgrade/Downgrade can be done without any downtime.
				- It used Rolling-Update Deployment Strategy by default to achieve Zero Downtime.

				Deployment
			
					pod1	mywebappimg:v1.0		===>		mywebappimg:v2.0
					pod2	mywebappimg:v1.0		===>		mywebappimg:v2.0
					pod3	mywebappimg:v1.0		===>		mywebappimg:v2.0
				
				
					- Deployment 
					
					- Replicaset
					
					- Pod Instances 

				Pod -> Atomic unit of schedule
				
					--> a smallest Task that you run in kubernetes is what a pod.
					
					--> 1 more than one container 
					
					

				VM --> jenkins/tomcat - Application
											--> Micro-Services --> Pod 

				
			- Daemonset :::
			
				- Is used to run a copy of pod in all the available Nodes in the cluster 
				
					-> Monitoring the Nodes 
					-> Logger / Reporting Tools on the nodes 
					
		Volumes :
			- Hostpath volume
			- ConfigMap
			- Secret
			- Persistant Volume
			- Persistant Volume Claim
			
			
		
		ConfigMap & Secret Volume :::
		
			ConfigMap Volume ==> Used to maintain any generic data  
			
			Secret Volume 	 ==> Used to maintain sensitive data
							 ==> Here the data will be encrypted, and it cannot be exposed out the pod.
		
			
		Hostpath volume	:::
		
			===> Volume/Dir created in the host machine 
			
			
		Persistant Volume
		
		Persistant Volume Claim		
		
			- Static / Dynamic -->

		Services 
			- NodePort Service 				# Used to Expose the pods to internet 
											# Created at the service level. i.e., 1 micro-service can have one node-port
											
			- Load Balancer Service 		# Created at the Application Level 
											# It is created on top of the Node-Port Service 
											# Using the Load Balancer IP Address, we can access the application 


			Routing Mechanism :::

				Host Based Routing 

					www.google.com 						Load Balancer IP 
						www.translate.google.com 			Host Based Routing 
						www.drive.google.com 
						
					
						
			
				Path Based Routing 
				
					www.gmail.com 
						www.gmail.com/inbox
						www.gmail.com/sent 
				
				Simple Routing 

				
				
				
			- ClusterIP Service 			# Used establish communication between the pods within the cluster
											# Default Service 


			Package Manages :::
			
				- apt / yum --> 
				
			Kubernetes_Master
					Kubernetes_WorkerNode1,2,3,4,5,6,7,....,100
					
			HELM Chart :
				- Helm is package Manager for Kubernetes_Cluster.
				
				Prometheus
				
				Kubernetes Dashboards 
				
				Final Demo:
				CICD Pipeline --> Create Kubernetes Dashboards using Helm and monitor the pods and services 
			
	
		Namespaces
		
			- Are the Logical Partition of the Cluster
				- based on environment/ Teams
				
			Deployment = Blue-Green Deployment	
					ACTIVE 				== LIVE - discard this 
					
					PASSIVE Server 		== New Feature Rel ---> Active LIVE 
					
			In Kubernetes This can be done using Namespaces.
			
			LIVE 
			
			Non-Prod 											DEV/UA/UAT (Namespace)
			Kubernetes_Cluster
					Kubernetes_WorkerNode1,2,3,4,5
			
			
			Prod 												Active_App (Namespace) Prod-Test(Namespace)
			Kubernetes_Cluster
					Kubernetes_WorkerNode1,2,3,4,5
					
					
Next :::					
					
IAC Tools :::

		Ansible - Fundamentals of Ansible
		
		Terraform 
		
		
		
		
		
Prometheus/Grafana

Demo - CICD 
